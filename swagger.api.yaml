# Version
openapi: 3.0.0

# Information about Swagger
info:
  title: Swagger API for Admission University
  description: This is swagger api documentation made by TDM team
  version: 1.0.0
  contact:
    email: danhnlcse140655@fpt.edu.vn
  servers:
    -url: http://localhost:3000/
    description: This is my local server
    -url: http://nodejs-backend3.us-east-2.elasticbeanstalk.com/
    description: This is my production server

# Paths
paths:
  /api/v1/regions:
    get:
      summary: Returns a object include code and list regions.
      description: Optional extended description in CommonMark or HTML
      responses:
        '200':
          description: A JSON array of region information
          content:
            application/json:
              schema: 
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  data:
                    type: array
                    example: []

  /api/v1/schools:
    get:
      summary: Returns a object include code and list schools.
      description: Optional extended description in CommonMark or HTML
      parameters:
        - in: query
          name: area
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of school information
          content:
            application/json:
              schema: 
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  data:
                    type: array
                    example: []

  /api/v1/users:
    get:
      summary: Returns a object include code and list users.
      description: Optional extended description in CommonMark or HTML
      responses:
        '200':
          description: A JSON array of user information
          content:
            application/json:
              schema: 
                type: array
                example: []
      
    post:
      summary: Create a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                fullname:
                  type: string
                password: 
                  type: string
      responses:
        '201':
          description: Create successfully
        '400':
          description: The specified username is invalid.
        '404':
          description: Username has already existed. 
        default:
          description: Unexpected error
        

  /api/v1/users/{username}:
    get:
      summary: Returns a user by username.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: The specified username is invalid.
        '404':
          description: A user with the specified username was not found.
        default:
          description: Unexpected error

    put:
      summary: Update user's information
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                password: 
                  type: string
      responses: 
        '201':
          description: Updated successfully
        '400':
          description: The specified username is invalid.
        '404':
          description: Username was not found.
        default:
          description: Unexpected error

    delete:
      summary: The user will be deleted.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete successfully.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: The specified username is invalid.
        '404':
          description: A user with the specified username was not found.
        default:
          description: Unexpected error

  /api/v1/users/login:
    post:
      summary: Login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password: 
                  type: string
      responses: 
        '201':
          description: Created
        '400':
          description: The specified username is invalid.
        '404':
          description: Username or Password is not correct.
        default:
          description: Unexpected error

  /api/v1/users/register:
    post:
        summary: Create a user.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  fullname:
                    type: string
                  password: 
                    type: string
        responses:
          '201':
            description: Create successfully
          '400':
            description: The specified username is invalid.
          '404':
            description: Username has already existed. 
          default:
            description: Unexpected error
